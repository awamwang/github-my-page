<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Githug解题方法]]></title>
    <url>%2F2018%2F07%2F18%2FGithug%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Githug是一个git练习游戏https://segmentfault.com/a/1190000004222489https://github.com/Gazler/githug 通用操作首先，设置一个自己习惯的编辑器 1git config --global core.editor vim 其次，如果需要的话，配置一些别名，会方便些123git config --global alias.co checkoutgit config --global alias.st statusgit config --global alias.rt remote 攻略 基于v0.5.0 Githug * No githug directory found, do you wish to create one? [yn] yWelcome to Githug! 1 Name: initLevel: 1Difficulty: * A new directory, git_hug, has been created; initialize an empty repository in it. 1git init 2 Name: configLevel: 2Difficulty: * Set up your git name and email, this is important so that your commits can be identified. 12git config --global user.name "Your Name"git config --global user.email "Your Email" 3 Name: addLevel: 3Difficulty: * There is a file in your folder called README, you should add it to your staging areaNote: You start each level with a new repo. Don’t look for files from the previous one. 1git add README 4 Name: commitLevel: 4Difficulty: * The README file has been added to your staging area, now commit it. 1git commit -am "README" 5 Name: cloneLevel: 5Difficulty: * Clone the repository at https://github.com/Gazler/cloneme. 1git clone https://github.com/Gazler/cloneme 6 Name: clone_to_folderLevel: 6Difficulty: * Clone the repository at https://github.com/Gazler/cloneme to my_cloned_repo. 1git clone https://github.com/Gazler/cloneme my_cloned_repo 7 Name: ignoreLevel: 7Difficulty: ** The text editor ‘vim’ creates files ending in .swp (swap files) for all files that are currently open. We don’t want them creeping into the repository. Make this repository ignore .swp files. 1vi .gitignore 在最后插入*.swp 8 Name: includeLevel: 8Difficulty: ** Notice a few files with the ‘.a’ extension. We want git to ignore all but the ‘lib.a’ file. 1vi .gitignore 在最后插入12*.a!lib.a 9 Name: statusLevel: 9Difficulty: * There are some files in this repository, one of the files is untracked, which file is it? 12githugdatabase.yml 10 Name: number_of_files_committedLevel: 10Difficulty: * There are some files in this repository, how many of the files will be committed? 12githug2 11 Name: rmLevel: 11Difficulty: ** A file has been removed from the working tree, however the file was not removed from the repository. Find out what this file was and remove it. 12git rm deleteme.rbgit commit -am "rm" 12 Name: rm_cachedLevel: 12Difficulty: ** A file has accidentally been added to your staging area, find out which file and remove it from the staging area. NOTE Do not remove the file from the file system, only from git. 1git rm --cache deleteme.rb 13 Name: stashLevel: 13Difficulty: ** You’ve made some changes and want to work on them later. You should save them, but don’t commit them. 1git stash 14 Name: renameLevel: 14Difficulty: *** We have a file called oldfile.txt. We want to rename it to newfile.txt and stage this change. 12git mv oldfile.txt newfile.txtgit add . 15 Name: restructureLevel: 15Difficulty: *** You added some files to your repository, but now realize that your project needs to be restructured. Make a new folder named src and using Git move all of the .html files into this folder. 12mkdir srcgit mv *.html ./src/ 16 Name: logLevel: 16Difficulty: ** You will be asked for the hash of most recent commit. You will need to investigate the logs of the repository for this. 1git log 17 Name: tagLevel: 17Difficulty: ** We have a git repo and we want to tag the current commit with new_tag. 1git tag new_tag 18 Name: push_tagsLevel: 18Difficulty: ** There are tags in the repository that aren’t pushed into remote repository. Push them now. 1git push --tags 19 Name: commit_amendLevel: 19Difficulty: ** The README file has been committed, but it looks like the file forgotten_file.rb was missing from the commit. Add the file and amend your previous commit to include it. 1git commit --amend -m 'new_commit' 20 Name: commit_in_futureLevel: 20Difficulty: ** Commit your changes with the future date (e.g. tomorrow). 1git commit -m "message" --date "Tue Jul 19 23:00:00 2018 +0800" // 要使用明天的日期 21 Name: resetLevel: 21Difficulty: ** There are two files to be committed. The goal was to add each file as a separate commit, however both were added by accident. Unstage the file to_commit_second.rb using the reset command (don’t commit anything). 1git reset HEAD to_commit_second.rb 22 Name: reset_softLevel: 22Difficulty: ** You committed too soon. Now you want to undo the last commit, while keeping the index. 1git reset --soft 7075e0120c2276e13265ece68a0fd64594d24175 23 Name: checkout_fileLevel: 23Difficulty: *** A file has been modified, but you don’t want to keep the modification. Checkout the config.rb file from the last commit. 1git checkout config.rb 24 Name: remoteLevel: 24Difficulty: ** This project has a remote repository. Identify it. 123git remote -vgithugmy_remote_repo 25 Name: remote_urlLevel: 25Difficulty: ** The remote repositories have a url associated to them. Please enter the url of remote_location. 123git remote -vgithughttps://github.com/githug/not_a_repo 26 Name: pullLevel: 26Difficulty: ** You need to pull changes from your origin repository. 1git pull origin 27 Name: remote_addLevel: 27Difficulty: ** Add a remote repository called origin with the url https://github.com/githug/githug 1git remote add origin https://github.com/githug/githug 28 Name: pushLevel: 28Difficulty: *** Your local master branch has diverged from the remote origin/master branch. Rebase your commit onto origin/master and push it to remote. 12git pull origin master --rebasegit push origin master 29 Name: diffLevel: 29Difficulty: ** There have been modifications to the app.rb file since your last commit. Find out which line has changed. 123git diffgithug26 30 Name: blameLevel: 30Difficulty: ** Someone has put a password inside the file config.rb find out who it was. 123git blame config.rbgithugSpider Man 31 Name: branchLevel: 31Difficulty: * You want to work on a piece of code that has the potential to break things, create the branch test_code. 1git branch test_code 32 Name: checkoutLevel: 32Difficulty: ** Create and switch to a new branch called my_branch. You will need to create a branch like you did in the previous level. 1git checkout -b my_branch 33 Name: checkout_tagLevel: 33Difficulty: ** You need to fix a bug in the version 1.2 of your app. Checkout the tag v1.2. 1git checkout tags/v1.2 35 Name: branch_atLevel: 35Difficulty: *** You forgot to branch at the previous commit and made a commit on top of it. Create branch test_branch at the commit before the last. 1git checkout -b test_branch HEAD^ 36 Name: delete_branchLevel: 36Difficulty: ** You have created too many branches for your project. There is an old branch in your repo called ‘delete_me’, you should delete it. 1git branch -D delete_me 37 Name: push_branchLevel: 37Difficulty: ** You’ve made some changes to a local branch and want to share it, but aren’t yet ready to merge it with the ‘master’ branch. Push only ‘test_branch’ to the remote repository 1git push origin test_branch 38 Name: mergeLevel: 38Difficulty: ** We have a file in the branch ‘feature’; Let’s merge it to the master branch. 1git merge feature 39 Name: fetchLevel: 39Difficulty: ** Looks like a new branch was pushed into our remote repository. Get the changes without merging them with the local repository 1git fetch origin 40 Name: rebaseLevel: 40Difficulty: ** We are using a git rebase workflow and the feature branch is ready to go into master. Let’s rebase the feature branch onto our master branch. 1git rebase master feature 41 Name: rebase_ontoLevel: 41Difficulty: ** You have created your branch from wrong_branch and already made some commits, and you realise that you needed to create your branch from master. Rebase your commits onto master branch so that you don’t have wrong_branch commits. 1git rebase wrong_branch --onto master 42 Name: repackLevel: 42Difficulty: ** Optimise how your repository is packaged ensuring that redundant packs are removed. 1git repack -d 43 Name: cherry-pickLevel: 43Difficulty: *** Your new feature isn’t worth the time and you’re going to delete it. But it has one commit that fills in README file, and you want this commit to be on the master as well. 1234git checkout new-featuregit log -p README.mdgit checkout mastergit cherry-pick &#123; commit &#125; 44 Name: grepLevel: 44Difficulty: ** Your project’s deadline approaches, you should evaluate how many TODOs are left in your code 1git grep TODO ./ 45 Name: rename_commitLevel: 45Difficulty: *** Correct the typo in the message of your first (non-root) commit. 123git loggit rebase -i &#123; commit &#125;进入编辑页面，将需要改动的行（第一行）的pick改为reword （注意，只需要通过reword来标记，不要修改拼写）。 保存退出后在弹出的第二个窗口里修改拼写错误commmit改为commit。 46 Name: squashLevel: 46Difficulty: ** You have committed several times but would like all those changes to be one commit. 123456git loggit rebase -i HEAD~4(git rebase -i &#123; commit &#125;)将弹出编辑页的第2、3、4行的pick改为squash， 第二个弹出页直接保存退出即可。 47 Name: merge_squashLevel: 47Difficulty: *** Merge all commits from the long-feature-branch as a single commit. 12git merge --squash long-feature-branchgit commit -m "47" 48 Name: reorderLevel: 48Difficulty: ** You have committed several times but in the wrong order. Please reorder your commits. 123456git loggit rebase -i HEAD~3(git rebase -i &#123; commit &#125;)把第二个提交和第三个提交换个位置 49 Name: bisectLevel: 49Difficulty: *** A bug was introduced somewhere along the way. You know that running ruby prog.rb 5 should output 15. You can also run make test. What are the first 7 chars of the hash of the commit that introduced the bug. 123456789101112131415161718 git log -p prog.rbcommit 18ed2ac1522a014412d4303ce7c8db39becab076Author: Robert Bittle &lt;guywithnose@gmail.com&gt;Date: Mon Apr 23 06:52:10 2012 -0400 Another Commitdiff --git a/prog.rb b/prog.rbindex 917e700..7562257 100644--- a/prog.rb+++ b/prog.rb@@ -1,3 +1,3 @@//#!/usr/bin/env ruby-puts Integer((Integer(ARGV[0])-1)*4)-1+puts Integer((Integer(ARGV[0])-2)*4)-1这次被改掉的原表达式值为15，所以答案是这次提交的前七位commit 50 Name: stage_linesLevel: 50Difficulty: ** You’ve made changes within a single file that belong to two different features, but neither of the changes are yet staged. Stage only the changes belonging to the first feature. 12git add -p feature.rb输入`e`，在编辑器中删除关于second feature的修改的那一行 51 Name: find_old_branchLevel: 51Difficulty: ** You have been working on a branch but got distracted by a major issue and forgot the name of it. Switch back to that branch. 12git refloggit checkout solve_world_hunger 52 Name: revertLevel: 52Difficulty: ** You have committed several times but want to undo the middle commit.All commits have been pushed, so you can’t change existing history. 12git loggit revert HEAD~1 53 Name: restoreLevel: 53Difficulty: ** You decided to delete your latest commit by running git reset --hard HEAD^. (Not a smart thing to do.) You then change your mind, and want that commit back. Restore the deleted commit. 12git refloggit checkout &#123; commit &#125; 54 Name: conflictLevel: 54Difficulty: ** You need to merge mybranch into the current branch (master). But there may be some incorrect changes in mybranch which may cause conflicts. Solve any merge-conflicts you come across and finish the merge. 1234git merge mybranchvi poem.txtgit add poem.txtgit commit -a 55 Name: submoduleLevel: 55Difficulty: ** You want to include the files from the following repo: https://github.com/jackmaney/githug-include-me into a the folder ./githug-include-me. Do this without cloning the repo or copying the files from the repo into this repo. 1git submodule add https://github.com/jackmaney/githug-include-me ./githug-include-me 56 Name: contributeLevel: 56Difficulty: *** This is the final level, the goal is to contribute to this repository by making a pull request on GitHub. Please note that this level is designed to encourage you to add a valid contribution to Githug, not testing your ability to create a pull request. Contributions that are likely to be accepted are levels, bug fixes and improved documentation.]]></content>
      <categories>
        <category>开发工具</category>
        <category>代码管理-Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你看不懂的JavaScript]]></title>
    <url>%2F2018%2F06%2F28%2F%E4%BD%A0%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84JavaScript%2F</url>
    <content type="text"><![CDATA[你看不懂的JavaScript一些别有用心的写法、一些语法糖、一些巧妙的用法 语法糖、语法简略属性函数省略function关键字12345obj &#123; key1: function () &#123; //something &#125;&#125; 上面代码可以简写为（E6提供）12345obj &#123; key1 () &#123; //something &#125;&#125; !!转为Boolean型12if (!!string1 === true ) &#123;&#125; 这个做法很常见，简单快捷针对上面的例子，更简便的写法是(因为逻辑表达式中string1会被隐式转换)，但是出于执行效率原因，应该尽量避免代码中的隐式转换1if (string1) &#123;&#125; 使用+转为Number类型1(+"1.1") + (+"1.1") // 2.2 这个方法比Number()简单，比ParseInt/parseFloat()通用 ||赋默认值1a = a || 1 // a如果没有值，则令a=1；在处理参数获取时很常见 &amp;&amp;串联步进的条件执行1user &amp;&amp; user.login(); // user不为逻辑false时，才执行后面的user.login() 使用slice将类Array转为Array1Array.prototype.slice.call(arguments); // turn arguments into pure array 别有用心的写法将类数组转为数组123var elements = document.querySelectorAll("p"); // NodeListvar arrayElements = [].slice.call(elements); // Now the NodeList is an arrayvar arrayElements = Array.from(elements) 立即执行函数123456var module = (function ClassName() &#123; var _this = &#123;&#125;; _this.para1 = null; _this.para2 = 0; return _this; &#125;)() 构造一个长度为20，元素全为1的Array123Array.apply(null, &#123; length: 20 &#125;).map(function () &#123; return 1&#125;) 结果等同于(上面的写法可以当做一个值直接使用，而这个需要有函数包裹)123var a = []a.length = 20a.fill(1) 建立一个没有proto的空对象1Object.create(null) 简约却不简单将数组排序却不改变原数组1namespaces.slice(0).sort() 利用对象展开和Set数组去重1let removeDuplicate = function(arr) &#123; return [...new Set(arr)] &#125; 对象解构的语法来获取数组的元素——数组也是特殊的对象12const csvFileLine = '1997,John Doe,US,john@doe.com,New York';const &#123; 2: country, 4: state &#125; = csvFileLine.split(',');]]></content>
      <categories>
        <category>语言学习</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么喜欢egg框架]]></title>
    <url>%2F2017%2F08%2F25%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%96%9C%E6%AC%A2egg%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[eggjs，来自于阿里前端团队，是一个开源的Node.js服务端开发框架。它的slogan是——为企业级框架和应用而生，不华丽，只是简单的表达了它的定位。 从名字’egg’看，它的能力是孵化，孵化应用。使用egg框架写了一个小应用后，发现它满足了我对一个框架在开发模式上的所有幻想，并且做了更多，真心点了个赞。 eggjs giteggjs 主页 说说egg的优点站在巨人的肩膀上 它继承于koa，拥有koa方便的Application对象结构和优秀的middlewire机制，同时把koa的基础操作封装起来，不需要使用者动手。 它可是阿里前端团队的作品，在阿里的Node.js项目中广泛使用，经历考验和蜕变 简单点，写作的方式简单点 它基于目录结构解析出多个种类的内置对象，并且可以自动完成类到实例的转化。 使用者要做的是把代码安插在合适的文件中，这使得代码结构很扁平，几乎就只需要罗列配置和方法。 使用者 不需要对内部对象进行维护，但却可以方便取用，因为框架会在合适的地方把它们暴露出来 。 其实并不简单 继承于koa框架，同时汲取express的历史沉淀，它已经继承和创造很多特性、插件，异常处理、会话管理、数据库管理等等都有相应的解决方案。 它拥有充分的可扩展性，它的扩展可以是插件和框架级别的，沉淀代码绝对方便。 因为一致，所以高度定制 它约束的是风格、上层的对象结构，并没有做默认的技术选型，也不默认添加可能用不到的功能。 app、框架、插件遵循相同结构，使得插件和框架的写作很方便，这就让使用者定制插件、框架都很容易，根据模板写作业务逻辑即可。 插件、框架的引入模式统一且简单，只要声明和必要的配置即可，不要处理导入、创造实例等动作。 大家都要的，框架来实现 统一清晰的配置机制，但又可以根据环境类型进行差异化配置。 异步编程，不需要额外编译，就可以使用async function和generator，让使用者可以优雅的同步方式编写异步代码 1234567891011function* main() &#123; console.log('start run...'); yield tick(500); yield tick(1000); yield tick(2000);&#125; 它使用cluster实现多线程，在生产环境也仅仅需要几行配置。它同时实现了不同进程类型间的通信，多进程模型绝对不是一个玩具。 文档好才是真的好 它的官方文档真的很不错，可操作性强、板块合理、内容详尽，而且颜值高 顾虑性能至少它应该不会比koa，在网上也看到，由于没有实践，不能做出评论]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>默认标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu常用软件源]]></title>
    <url>%2F2017%2F08%2F18%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%AC%E5%85%B1%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2FLinux%2FUbuntu%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%BA%90%2F</url>
    <content type="text"><![CDATA[Ubuntu常用软件源html, body {font-size: 12pt;}body {font-family: Helvetica, ‘Hiragino Sans GB’, ‘微软雅黑’, ‘Microsoft YaHei UI’, SimSun, SimHei, arial, sans-serif;line-height: 1.6;margin: 0 auto;padding: 20px 16px;padding: 1.25rem 1rem;}h1, h2, h3, h4, h5, h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}h1 {font-size:20pt;font-size:1.67rem;}h2 {font-size:18pt;font-size:1.5rem;}h3 {font-size:15pt;font-size:1.25rem;}h4 {font-size:14pt;font-size:1.17rem;}h5 {font-size:12pt;font-size:1rem;}h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}div, p, ul, ol, dl, li {margin:0;}blockquote, table, pre, code {margin:8px 0;}ul, ol {padding-left:32px;padding-left:2rem;}ol.wiz-list-level1 &gt; li {list-style-type:decimal;}ol.wiz-list-level2 &gt; li {list-style-type:lower-latin;}ol.wiz-list-level3 &gt; li {list-style-type:lower-roman;}blockquote {padding:0 12px;padding:0 0.75rem;}blockquote &gt; :first-child {margin-top:0;}blockquote &gt; :last-child {margin-bottom:0;}img {border:0;max-width:100%;height:auto !important;margin:2px 0;}table {border-collapse:collapse;border:1px solid #bbbbbb;}td, th {padding:4px 8px;border-collapse:collapse;border:1px solid #bbbbbb;min-height:28px;word-break:break-all;box-sizing: border-box;}.wiz-hide {display:none !important;}14.04# 163deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse#aliyundeb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse比较快的国内源http://zhoushijun.iteye.com/blog/1942475/ 清华大学开源软件镜像站https://mirrors.tuna.tsinghua.edu.cn/status/]]></content>
      <categories>
        <category>计算机公共</category>
        <category>操作系统</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>默认标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css学习之background-size]]></title>
    <url>%2F2017%2F01%2F17%2Fweb%E5%BC%80%E5%8F%91%2Fcss%2Fcss%E5%AD%A6%E4%B9%A0%E4%B9%8Bbackground-size%2F</url>
    <content type="text"><![CDATA[background-size属性background-size: auto(原始图片大小) || number(数值) || percentage(百分比) || cover(放大铺满) || contain(缩小铺满) 试验 总结]]></content>
      <categories>
        <category>web开发</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络代理初识]]></title>
    <url>%2F2016%2F12%2F27%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%AC%E5%85%B1%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[网络代理初识——正向代理与反向代理引入代理对很多计算机小白来说是个很玄妙的词，对他们和曾经的我来说，代理意味着可以访问Google和Facebook，有个更通俗的描述叫“翻墙”。直到最近才发现，把一个域名解析到某个IP的特定端口，这种操作实际上也是一种代理，而它与“翻墙”相比，恰好是代理的两种方式——前者是正向代理，后者是反向代理。这里直接引一块玉（如果懒的看，可以直接跳过，试着让我来解释）, 知乎——反向代理为何叫反向代理？ 学习与总结知乎上回答中的图片很清晰 描述实际上也很易懂： 正向代理： 在客户端不能直接访问到服务端时，代理服务器将客户端需求转给服务端，并且把服务端的处理结果返还给客户端 反向代理： 客户端发出需求到代理服务器，代理服务器根据一定的原则将需求交给某（几）个服务器处理，并且返还处理结果 延伸思考正向代理通过上面的学习，很容易理解到，正向代理可以解决“墙”的问题，只要代理服务器是我们能访问到的 反向代理反向代理既然能在代理服务器这个节点上出现一对多的分散访问，1 我们常说的“负载均衡”就必然是它的一个应用方向2 代理服务器能接受到客户端的需求，那么它就可以根据需求的特征来按需分发处理请求，比如按照请求人的名字、区域、喜好来分配服务器3 一个在开发过程很需要的用途——将大网请求按照特征分发到局域网]]></content>
      <categories>
        <category>计算机公共</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>学习总结</tag>
      </tags>
  </entry>
</search>
